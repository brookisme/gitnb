{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import json\n",
    "from pprint import pprint"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LOAD EXAMPLE NOTEBOOK\n",
    "The example notebook is the same as this one except in \n",
    "the next input we put 'firstpass.ipynb' without the '.example'\n",
    "Note 'firstpass.ipynb' is excluded from the repo since its a notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('firstpass.ipynb.example') as data_file:    \n",
    "    nb = json.load(data_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# # Print outut nb to think about what to include and get keys\n",
    "# pprint(nb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GET CELLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cells=nb.get('cells',[])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# # Print out cells\n",
    "# pprint('\\n\\n\\n',cells[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CONFIG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "TYPE_KEY='cell_type'\n",
    "INCLUDE_OUTPUT=False\n",
    "OUTPUTS_KEY='outputs'\n",
    "OUTPUT_KEY='text'\n",
    "HEADER_KEYS=[] # DEFAULT SHOULD BE EMPTY [], but you could say have ['execution_count'] or something\n",
    "SOURCE_KEY='source'\n",
    "CODE_TYPE='code'\n",
    "EMPTY_LINE=''\n",
    "LINES_BEFORE_HEADER=2\n",
    "LINES_AFTER_HEADER=0\n",
    "LINES_BEFORE_SOURCE=2\n",
    "LINES_AFTER_SOURCE=0\n",
    "LINES_BEFORE_OUTPUTS=2\n",
    "LINES_AFTER_OUTPUTS=0\n",
    "LINES_BETWEEN_OUTPUTS=1\n",
    "HEADER_LABEL='cell-data'\n",
    "HEADER_START='\"\"\"{}'\n",
    "HEADER_END='\"\"\"'\n",
    "CODE_START='# ----------------- [code] -----------------'\n",
    "CODE_END='# ----------------------------------------'\n",
    "UNCODE_START='\"\"\"[{}]'\n",
    "UNCODE_END='\"\"\"'\n",
    "OUTPUTS_START='\"\"\"[{}]'\n",
    "OUTPUTS_END='\"\"\"'\n",
    "OUTPUTS_LABEL_KEY=None\n",
    "OUTPUTS_LABEL='output'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## METHODS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def _append_empty_lines(lines,n):\n",
    "    for i in range(n): \n",
    "        lines.append(EMPTY_LINE)\n",
    "    return lines\n",
    "\n",
    "\n",
    "def cell_header(cell):\n",
    "    lines=[]\n",
    "    lines=_append_empty_lines(lines,LINES_BEFORE_HEADER)\n",
    "    if HEADER_KEYS:\n",
    "        lines.append(HEADER_START.format(HEADER_LABEL))    \n",
    "        for key in HEADER_KEYS:\n",
    "            val=cell.get(key,'')\n",
    "            lines.append(\"{}: {}\".format(key,val))    \n",
    "        lines.append(HEADER_END)\n",
    "    lines=_append_empty_lines(lines,LINES_AFTER_HEADER)\n",
    "    return lines\n",
    "\n",
    "\n",
    "def _clean(line):\n",
    "    return line.replace('\\n','').strip(' ')\n",
    "\n",
    "\n",
    "def _cell_type_and_source_lines(cell):\n",
    "    cell_type=cell.get(TYPE_KEY)\n",
    "    source_lines=cell.get(SOURCE_KEY,[])\n",
    "    return cell_type,[_clean(line) for line in source_lines]\n",
    "\n",
    "\n",
    "def source(cell):\n",
    "    cell_type, lines=_cell_type_and_source_lines(cell)\n",
    "    if lines:\n",
    "        lines=[_clean(line) for line in lines]\n",
    "        if cell_type!=CODE_TYPE:\n",
    "            lines.insert(0,UNCODE_START.format(cell.get(TYPE_KEY,''))) \n",
    "            lines.append(UNCODE_END) \n",
    "        else:\n",
    "            if CODE_START:\n",
    "                lines.insert(0,CODE_START.format(cell.get(TYPE_KEY,'')))\n",
    "            if CODE_END:\n",
    "                lines.append(CODE_END)       \n",
    "    return lines\n",
    "\n",
    "\n",
    "def _output(out):\n",
    "    # MAYBE DO SOMETHING MORE HERE - STRIP IMAGES ECT\n",
    "    return _clean(out.get(OUTPUT_KEY,''))\n",
    "    \n",
    "\n",
    "def outputs(cell):\n",
    "    lines=[]\n",
    "    outputs=cell.get(OUTPUTS_KEY,False)\n",
    "    if outputs:\n",
    "        lines=_append_empty_lines(lines,LINES_BEFORE_OUTPUTS)\n",
    "        lines.append(OUTPUTS_START.format(cell.get(OUTPUTS_LABEL_KEY,OUTPUTS_LABEL))) \n",
    "        for out in outputs: lines=lines+_outputs(out)\n",
    "        lines.append(OUTPUTS_END)  \n",
    "        lines=_append_empty_lines(lines,LINES_AFTER_OUTPUTS)\n",
    "    return lines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GET LINES"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "This is the raw-nb-convert cell that I am putting in to see how it works. I've never used this cell-type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "notebook_lines=[]\n",
    "for cell in cells: \n",
    "    notebook_lines=notebook_lines+cell_header(cell)\n",
    "    notebook_lines=notebook_lines+source(cell)\n",
    "    if INCLUDE_OUTPUT:\n",
    "        notebook_lines=notebook_lines+outputs(cell)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# # print out notebook_lines\n",
    "# nb_lines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Write to file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('firstpass-example.py','w') as file:\n",
    "    for line in notebook_lines:\n",
    "        file.write('{}\\n'.format(line))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
